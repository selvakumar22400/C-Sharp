topics  : 
        *polymorpism
          method overloading
          method overriding
          
        *ABSTRACTION
          ABSTRACT
          INTERFACE
          
        *CLASS
          properties
          static class
          sealed class
          partial class
          abstract class
          
           

polymorpism :   same method giving multiple meaning 
//https://www.c-sharpcorner.com/blogs/difference-between-method-overloading-and-method-overriding

method overloading;

        => Creating more than one method or a function that has a same name but different signatures or parameters in the same class is called method overloading.
           
      *Key points

          =>Method overloading is also called  // early binding or compile time polymorphism  // or static binding.
          =>The compiler automatically calls the required method or the function by checking number of parameters and their type, which are passed into that method.
          =>If the number of parameters and type doesn't match by any method signatures, then it will give the compile time error.
          =>We can achive method overloading by changing the number of parameters used or by using different types of parameters or by changing the order of parameters


method overriding:
  
       => method overriding means having two methoods with same name and same parameter ,one method in the base class another one in the dirivied class  
       
       *Key points

          => Method overriding is also called // run time polymorphism or dynamic polymorphism  or late binding //.
          => We can override a method in the base class by creating similar function in the derived class. This can be achieved by using inheritance and using virtual & override.
          => Same signature means the methods must have the same name, same number of arguments and same type of arguments.
          => Method overriding is possible only in the derived classes, but not within the same class.
          => When the derived class needs a method with the same signature as in the base class, but wants to execute different code than the one provided by the base class then method overriding will be used.
          => Method overriding in C# is a feature like the virtual function in C++.
          
          
          
          
          ---------Important keywords in method overriding-------------

===========>Virtual keyword
  
If we use Virtual keyword, then we tell to compiler that this method can be overridden by the derived classes.

public virtual int Print()  
{  
   //Implementation of Print method in Base class  
} 


 ============>Override keyword
 
If we use Overrride keyword, then we tell to the compiler that this method is overriding the same named method in the base class.

public override int Print()  
{  
   //Implementation of Print method in Derived class  
}  


 ============>Base keyword
 
If we use base keyword, then we tell to the compiler that this method calls the base class method for overriding functionality.

base.Print();  

//https://www.c-sharpcorner.com/blogs/difference-between-method-overloading-and-method-overriding


..............................................................................................................................................................................


//https://www.knowledgehut.com/tutorials/csharp/csharp-abstraction

ABSTRACT :  
          =>It means that only the required information is visible to the user and the rest of the information is hidden.
          =>Abstract classes are base classes with partial implementation.
          =>These classes contain abstract methods that are inherited by other classes that provide more functionality.
          
      abstract class containes two type of methods
          1.abstract method 
          2.non abstract method 


      Some of the salient points about abstract classes are as follows:

                =>The abstract class is created using the keyword abstract and some of the methods of the abstract class also contain the keyword abstract.
                =>No object can be created of the abstract class i.e.it cannot be instantiated.
                =>The abstract methods in the abstract class are implemented actually only in the derived classes.
                =>If all the methods in the abstract class contain the keyword abstract, then that class is known as pure Abstract class.
                
                
                
                
using System;
namespace AbstractionDemo
{
   abstract class Shape               //base class
   {
     public abstract double area();   //abstract method
   }
   
   class Circle: Shape                //derivied class 1
   {
     private double radius;           //defined the variable
     public Circle( double r)         //parameter constractor
     {
        radius = r;
     }
     public override double area ()   //override the base class method 
     {
        return (3.14*radius*radius);
     }
   }
   class Square: Shape                //derived class 2
   {
     private double side;
     public Square( double s)         // parameter constractor
     {
        side = s;
     }
     public override double area ()   //override the base class method 
     {
        return (side*side);
     }
   }
    class Triangle: Shape                   //derived class 3
   {
     private double tbase;
     private double theight;
     public Triangle( double b, double h)  // parameter constractor
     {
        tbase = b;
        theight = h;
     }
     public override double area ()       // override the base class method 
     {
        return (0.5*tbase*theight);
     }
  }
   class Test
   {
     static void Main(string[] args)
     {
        Circle c = new Circle(5.0);
        Console.WriteLine("Area of Circle = {0}", c.area());
        Square s = new Square(2.5);
        Console.WriteLine("Area of Square = {0}", s.area());
        Triangle t = new Triangle(2.0, 5.0);
        Console.WriteLine("Area of Triangle = {0}", t.area());
     }
   }
}
The output of the above program is as follows:

Area of Circle = 78.5
Area of Square = 6.25
Area of Triangle = 5


//https://www.knowledgehut.com/tutorials/csharp/csharp-abstraction


................................................................................................................................................................................


INTERFACE :
           =>The interface members are only declared in the interface and they need to be defined in the class that derives them.

           =>Interfaces are quite useful when a class needs to inherit functionalities from multiple sources as multiple inheritance is not allowed in C#.
           
           
   NOTE : The keyword interface is used for interface definition. The interface names begin with a capital I because of convention.

interface Iinterface_name
{
     // interface body
}


EXAMPLE:

using System;
namespace InterfaceDemo
{
   public interface IStudent
   {
     void putData();
   }
   public class Student: IStudent
   {
       private int rno;
       private string name;
       private double marks;
       public Student(int r, string n, double m)
       {
           rno = r;
           name = n;
           marks = m;
       }
       public void putData()
       {
           Console.WriteLine("Roll Number = {0}", rno);
           Console.WriteLine("Name = {0}", name);
           Console.WriteLine("Marks = {0}", marks);
           Console.WriteLine();
       }
   }
   class Test
   {
     static void Main(string[] args)
     {
        Student s1 = new Student(1, "John", 78.5);
        Student s2 = new Student(2, "Sara", 60.0);
        Student s3 = new Student(3, "Bruce", 98.5);
        s1.putData();
        s2.putData();
        s3.putData();
     }
   }
}

Roll Number = 1
Name = John
Marks = 78.5

Roll Number = 2
Name = Sara
Marks = 60

Roll Number = 3
Name = Bruce
Marks = 98.5

...............................................................................................................................................................................

CLASSES:

    PROPERTIES:
    
              => C# Properites doesn't have storage location. C# Properites are extension of fields and accessed like fields.

              => The Properties have accessors that are used to set, get or compute their values.

              Usage of C# Properties
                    => C# Properties can be read-only or write-only.
                    => We can have logic while setting values in the C# Properties.
                    => We make fields of the class private, so that fields can't be accessed from outside the class directly. Now we are forced to use C# properties for setting or getting values.
          
          
              C# Properties Example
              
                            using System;  
                               public class Employee  
                                {  
                                    private string name;  

                                    public string Name  
                                    {  
                                        get  
                                        {  
                                            return name;  
                                        }  
                                        set  
                                        {  
                                            name = value;  
                                        }  
                                    }  
                               }  
                               class TestEmployee{  
                                   public static void Main(string[] args)  
                                    {  
                                        Employee e1 = new Employee();  
                                        e1.Name = "Sonoo Jaiswal";  
                                        Console.WriteLine("Employee Name: " + e1.Name);  

                                    }  
                                }  
                            Output:

                            Employee Name: Sonoo Jaiswal
                            
                                    
                Properties Example 2: having logic while setting value
                
                               using System;  
                               public class Employee  
                                {  
                                    private string name;  

                                    public string Name  
                                    {  
                                        get  
                                        {  
                                            return name;  
                                        }  
                                        set  
                                        {  
                                            name = value;  
                                        }  
                                    }  
                               }  
                               class TestEmployee{  
                                   public static void Main(string[] args)  
                                    {  
                                        Employee e1 = new Employee();  
                                        e1.Name = "Sonoo Jaiswal";  
                                        Console.WriteLine("Employee Name: " + e1.Name);  

                                    }  
                                }  
                            Output:

                            Employee Name: Sonoo Jaiswal
       
       
      =>   Static class: Static class, defined by the keyword ‘static’ does not allow inheritance. Therefore, you cannot create an object for a static class.
      
              static class classname  
              {  
                //static data members  
                //static methods  
              }

     =>   Partial class: 
              => Partial class, defined by the keyword ‘partial’ allows its members to partially divide or share source (.cs) files.
              => physically separated ,logicaly grouped.
               
               

     =>   Abstract class:
                => you cannot create objects
                => Abstract classes work on the OOPS concept of abstraction.
                => Abstraction helps to extract essential details and hide the unessential ones.
                

     =>   Sealed class: 
              =>Sealed classes are classes that cannot be inherited
              =>Use the keyword sealed to restrict access to users to inherit that class. 
              
              sealed class classname
              {
                 // data members
                 // methods
                 .
                 .
                 .
              }

................................................................................................................................................................................

INHERITENS:
          =>using the base class feature in derived class 
         
         
          => Advantage of  Inheritance
               Code reusability:
                                Now you can reuse the members of your parent class. So, there is no need to define the member again. So less code is required in the class.
                                
 Single Level Inheritance
           
          =>  When one class inherits another class, it is known as single level inheritance. 
          
             Example: Inheriting Fields
           
                               using System;  
                               public class Employee  
                                {  
                                   public float salary = 40000;  
                               }  
                               public class Programmer: Employee  
                               {  
                                   public float bonus = 10000;  
                               }  
                               class TestInheritance{  
                                   public static void Main(string[] args)  
                                    {  
                                        Programmer p1 = new Programmer();  

                                        Console.WriteLine("Salary: " + p1.salary);  
                                        Console.WriteLine("Bonus: " + p1.bonus);  

                                    }  
                                }
    
    
          => Single Level Inheritance Example: Inheriting Methods
     

                               using System;  
                               public class Animal  
                                {  
                                   public void eat() { Console.WriteLine("Eating..."); }  
                               }  
                               public class Dog: Animal  
                               {  
                                   public void bark() { Console.WriteLine("Barking..."); }  
                               }  
                               class TestInheritance2{  
                                   public static void Main(string[] args)  
                                    {  
                                        Dog d1 = new Dog();  
                                        d1.eat();  
                                        d1.bark();  
                                    }  
                                }  
                            Output:

                            Eating...
                            Barking...



          =>Multi Level Inheritance Example
          
                                using System;  
                               public class Animal  
                                {  
                                   public void eat() { Console.WriteLine("Eating..."); }  
                               }  
                               public class Dog: Animal  
                               {  
                                   public void bark() { Console.WriteLine("Barking..."); }  
                               }  
                               public class BabyDog : Dog  
                               {  
                                   public void weep() { Console.WriteLine("Weeping..."); }  
                               }  
                               class TestInheritance2{  
                                   public static void Main(string[] args)  
                                    {  
                                        BabyDog d1 = new BabyDog();  
                                        d1.eat();  
                                        d1.bark();  
                                        d1.weep();  
                                    }  
                                }  
                            Output:

                            Eating...
                            Barking...
                            Weeping...
                            
                            
                            
         =>Multiple Inheritance
                   A class can also be derived from more than one base class, using a comma-separated list:

                            Example
                            // Base class
                            class MyClass {
                              public:
                                void myFunction() {
                                  cout << "Some content in parent class." ;
                                }
                            };

                            // Another base class
                            class MyOtherClass {
                              public:
                                void myOtherFunction() {
                                  cout << "Some content in another class." ;
                                }
                            };

                            // Derived class
                            class MyChildClass: public MyClass, public MyOtherClass {
                            };

                            int main() {
                              MyChildClass myObj;
                              myObj.myFunction();
                              myObj.myOtherFunction();
                              return 0;
                            }


